<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.codyy.slr.dao.ResCommentMapper">
	<resultMap id="BaseResultMap" type="com.codyy.slr.entity.ResComment">
		<id column="RESOURCE_COMMENT_ID" property="resourceCommentId"
			jdbcType="VARCHAR" />
		<result column="RESOURCE_ID" property="resourceId" jdbcType="VARCHAR" />
		<result column="COMMENT_USER_ID" property="commentUserId"
			jdbcType="VARCHAR" />
		<result column="COMMENT_CONTENT" property="commentContent"
			jdbcType="VARCHAR" />
		<result column="CREATE_TIME" property="createTime" jdbcType="OTHER" />
		<result column="PARENT_COMMENT_ID" property="parentCommentId"
			jdbcType="VARCHAR" />
		<result column="REPLY_TO_USER_ID" property="replyToUserId"
			jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		RESOURCE_COMMENT_ID, RESOURCE_ID, COMMENT_USER_ID, COMMENT_CONTENT, CREATE_TIME,
		PARENT_COMMENT_ID, REPLY_TO_USER_ID
	</sql>
	
	<sql id="Base_Column_List2">
		t.RESOURCE_COMMENT_ID resourceCommentId, t.RESOURCE_ID resourceId, t.COMMENT_USER_ID commentUserId, t.COMMENT_CONTENT commentContent, t.CREATE_TIME createTime,
		t.PARENT_COMMENT_ID parentCommentId, t.REPLY_TO_USER_ID replyToUserId
	</sql>
	 
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from RES_COMMENT
		where RESOURCE_COMMENT_ID = #{resourceCommentId,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from RES_COMMENT
		where RESOURCE_COMMENT_ID = #{resourceCommentId,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="com.codyy.slr.entity.ResComment">
		insert into RES_COMMENT (RESOURCE_COMMENT_ID, RESOURCE_ID,
		COMMENT_USER_ID,
		COMMENT_CONTENT, CREATE_TIME, PARENT_COMMENT_ID,
		REPLY_TO_USER_ID)
		values (#{resourceCommentId,jdbcType=VARCHAR},
		#{resourceId,jdbcType=VARCHAR}, #{commentUserId,jdbcType=VARCHAR},
		#{commentContent,jdbcType=VARCHAR}, #{createTime,jdbcType=OTHER},
		#{parentCommentId,jdbcType=VARCHAR},
		#{replyToUserId,jdbcType=VARCHAR})
	</insert>

	<select id="getResCommentPageList" resultType="com.codyy.slr.vo.ResCommentVo"
		parameterType="com.codyy.slr.common.page.Page">
		select <include refid="Base_Column_List2"/>,u.realname USERNAME
		from res_comment t
		left join user u on u.user_id = t.comment_user_id
		left join resource res on t.resource_id = res.resource_id
		where t.RESOURCE_ID = #{map.resourceId}
		and (t.PARENT_COMMENT_ID is null or t.PARENT_COMMENT_ID = -1)
		order by t.CREATE_TIME desc
	</select>
	
	
	<select id="getSubResCommentList" resultType="com.codyy.slr.vo.ResCommentVo" parameterType="java.util.List">
		select <include refid="Base_Column_List2"/>,u.realname USERNAME,u2.realname replyToUserName
		from res_comment t
		left join user u on u.user_id = t.comment_user_id
		left join user u2 on u2.user_id = t.reply_to_user_id
		where t.PARENT_COMMENT_ID in 
		<foreach  collection="list"  item="id"   open="("  separator=","  close=")">  
			#{id}  
		</foreach>  
		order by t.CREATE_TIME
	</select>
	
	<select id="delBatchComment" parameterType="java.util.List">
		delete from RES_COMMENT where RESOURCE_COMMENT_ID in 
		<foreach  collection="list"  item="id"   open="("  separator=","  close=")">  
			#{id}  
		</foreach>  
	</select>
	
	<select id="getCommentByKeyId" resultType="com.codyy.slr.vo.ResCommentVo" parameterType="java.lang.String">
		select <include refid="Base_Column_List2"/>,u.realname USERNAME,u2.realname replyToUserName,
		from res_comment t
		left join user u on u.user_id = t.comment_user_id
		left join user u2 on u2.user_id = t.reply_to_user_id
		where t.RESOURCE_COMMENT_ID = #{commentId} 
	</select>
	
	<select id="getSubResCommentPageList" resultType="com.codyy.slr.vo.ResCommentVo" parameterType="com.codyy.slr.common.page.Page">
		select <include refid="Base_Column_List2"/>,u.realname USERNAME,u2.realname replyToUserName
		from res_comment t
		left join user u on u.user_id = t.comment_user_id
		left join user u2 on u2.user_id = t.reply_to_user_id
		where t.PARENT_COMMENT_ID = #{map.parentCommentId}
		order by t.CREATE_TIME
	</select>
	
	<select id="getResCommentCount" resultType="java.lang.Integer" parameterType="java.lang.String">
		select count(1)
		from res_comment
		where RESOURCE_ID = #{resourceId}
	</select>
	
	<delete id="delCommentByResId" parameterType="java.lang.String">
		delete from res_comment where resource_id = #{resourceId}
	</delete>
	
	<select id = "getAllResCommentPageList" resultType="com.codyy.slr.vo.ResCommentVo" parameterType="com.codyy.slr.common.page.Page">
		SELECT
			rc.COMMENT_CONTENT commentContent,rc.RESOURCE_COMMENT_ID resourceCommentId,u.REALNAME realName,res.RESOURCE_NAME resourceName,res.RESOURCE_ID resourceId
		FROM
		res_comment rc
		LEFT JOIN USER u ON u.USER_ID = rc.COMMENT_USER_ID
		left join resource res on res.RESOURCE_ID = rc.RESOURCE_ID
		WHERE 1=1 
		 <if test="map.realname != null and map.realname != ''" >
		and  u.REALNAME like CONCAT('%',#{map.realname},'%') ESCAPE '/'
		</if>
		 <if test="map.keywords != null and map.keywords != ''">
		and (res.RESOURCE_NAME like CONCAT('%',#{map.keywords},'%') ESCAPE '/' or rc.COMMENT_CONTENT like CONCAT('%',#{map.keywords},'%') ESCAPE '/')
		</if>
		order by rc.CREATE_TIME desc
	</select>
	
</mapper>